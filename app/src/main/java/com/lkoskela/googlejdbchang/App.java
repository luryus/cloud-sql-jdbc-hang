/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.lkoskela.googlejdbchang;

import java.io.IOException;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.LogManager;
import java.util.logging.Logger;
import java.util.Properties;

public class App {

    public static final Logger logger = Logger.getLogger("app");

    public static void main(String[] args) {

        try (var logConfigInputStream = App.class.getClassLoader().getResourceAsStream("logging.properties")) {
            try {
                LogManager.getLogManager().readConfiguration(logConfigInputStream);
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        if (args.length != 1) {
            System.err.println("Usage: app <Cloud SQL JDBC connection string>");
            System.err.println("e.g.: app 'jdbc:postgresql:///postgres?cloudSqlInstance=gcp-project:europe-west3:sql-instance-1&username=postgres'");
            return;
        }

        var connString = args[0];
        var password = System.getenv("DB_PASSWORD");
        if (password == null) {
            System.err.println("Give password in DB_PASSWORD env var");
            return;
        }

        var props =  new Properties();
        props.setProperty("password", password);
        props.setProperty("socketFactory", "com.google.cloud.sql.postgres.SocketFactory");

        while (true) {
            try {

                Thread.sleep(1000);

                logger.info("Opening connection...");
                var conn = DriverManager.getConnection(connString, props);

                while (conn.isValid(5000)) {
                    logger.fine("Connection is still valid");
                    Thread.sleep(20000);
                }

                logger.info("Connection no longer valid");


            } catch (SQLException e) {
                logger.log(Level.WARNING, "SQLException", e);
            } catch (InterruptedException e) {
                break;
            }
        }
    }
}
